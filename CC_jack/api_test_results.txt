=== Travel Agent Management System API Test Script ===
This script will test all existing endpoints of your microservices application
Fri Apr 25 12:14:36 PM IST 2025

=== Testing Agent Service ===
Testing: Create a new agent
URL: POST http://localhost:8000/agents
Payload: {
    "name": "John Smith",
    "email": "john@example.com",
    "phone": "123-456-7890",
    "availability": {
        "days": ["Monday", "Wednesday", "Friday"],
        "shift": "morning"
    }
}
Success! Response:
{
  "id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
  "name": "John Smith",
  "email": "john@example.com",
  "phone": "123-456-7890",
  "rating": 0.0,
  "availability": {
    "days": [
      "Monday",
      "Wednesday",
      "Friday"
    ],
    "shift": "morning"
  }
}
Created agent with ID: bf1663d6-d2b7-43a9-969c-efbfca033ba0

Testing: List all agents
URL: GET http://localhost:8000/agents
Success! Response:
[
  {
    "id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "name": "John Smith",
    "email": "john@example.com",
    "phone": "123-456-7890",
    "rating": 0.0,
    "availability": {
      "days": [
        "Monday",
        "Wednesday",
        "Friday"
      ],
      "shift": "morning"
    }
  }
]

Testing: Get specific agent
URL: GET http://localhost:8000/agents/bf1663d6-d2b7-43a9-969c-efbfca033ba0
Success! Response:
{
  "id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
  "name": "John Smith",
  "email": "john@example.com",
  "phone": "123-456-7890",
  "rating": 0.0,
  "availability": {
    "days": [
      "Monday",
      "Wednesday",
      "Friday"
    ],
    "shift": "morning"
  }
}

Testing: Update agent availability
URL: PUT http://localhost:8000/agents/bf1663d6-d2b7-43a9-969c-efbfca033ba0/availability
Payload: {
    "days": ["Tuesday", "Thursday"],
    "shift": "evening"
}
Success! Response:
{
  "days": [
    "Tuesday",
    "Thursday"
  ],
  "shift": "evening"
}

Testing: Get agent availability
URL: GET http://localhost:8000/agents/bf1663d6-d2b7-43a9-969c-efbfca033ba0/availability
Success! Response:
{
  "days": [
    "Tuesday",
    "Thursday"
  ],
  "shift": "evening"
}

=== Testing Booking Service ===
Testing: Create a new booking
URL: POST http://localhost:8001/bookings
Payload: {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "customer_name": "Alice Johnson",
    "service_type": "Flight",
    "price": 350.00
}
Success! Response:
{
  "booking_id": "8f1996a4-b992-4110-9f8e-700990fa0781",
  "commission_amount": 35.0
}
Created booking with ID: 8f1996a4-b992-4110-9f8e-700990fa0781

Testing: Get agent bookings
URL: GET http://localhost:8001/agents/bf1663d6-d2b7-43a9-969c-efbfca033ba0/bookings
Success! Response:
[
  {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "customer_name": "Alice Johnson",
    "service_type": "Flight",
    "price": 350.0
  }
]

Testing: Get agent commission
URL: GET http://localhost:8001/agents/bf1663d6-d2b7-43a9-969c-efbfca033ba0/commission
Success! Response:
[
  {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "booking_id": "8f1996a4-b992-4110-9f8e-700990fa0781",
    "commission_percentage": 10.0,
    "commission_amount": 35.0
  }
]

=== Testing Sales Service ===
Testing: Record a sale
URL: POST http://localhost:8002/sales/record
Payload: {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "price": 450.00
}
Success! Response:
{
  "message": "Sale recorded"
}

Testing: Get sales by agent
URL: GET http://localhost:8002/sales/by-agent/bf1663d6-d2b7-43a9-969c-efbfca033ba0
Success! Response:
[
  {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "sales": 450.0
  }
]

Testing: Get sales trends
URL: GET http://localhost:8002/sales/trends
Success! Response:
{
  "trend": "positive",
  "growth_percentage": 10
}

=== Testing Invoicing Service ===
Testing: Generate an invoice
URL: POST http://localhost:8003/invoice
Payload: {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "customer_name": "Bob Wilson",
    "amount": 550.00
}
Success! Response:
{
  "invoice_id": "0be9b268-2171-41db-940d-4983622fd680",
  "amount": 550.0
}

Testing: Process agent payout
URL: POST http://localhost:8003/payout
Payload: {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "payout_amount": 220.00
}
Success! Response:
{
  "payout_id": "3b5f8d6f-45e5-4af7-8eb9-87fbf3f45b5b",
  "amount": 220.0
}

Testing: Get agent payouts
URL: GET http://localhost:8003/agents/bf1663d6-d2b7-43a9-969c-efbfca033ba0/payouts
Success! Response:
[
  {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "payout_amount": 220.0
  }
]

=== Testing Train Booking Service ===
Testing: List all trains
URL: GET http://localhost:8084/trains
Success! Response:
[
  {
    "train_number": "TRN001",
    "name": "Express 505",
    "source": "New York",
    "destination": "Washington DC",
    "departure_time": "08:30",
    "arrival_time": "12:00",
    "available_classes": [
      "First Class",
      "Business",
      "Economy"
    ],
    "base_price": {
      "First Class": 150.0,
      "Business": 100.0,
      "Economy": 50.0
    }
  },
  {
    "train_number": "TRN002",
    "name": "Coastal Link",
    "source": "Boston",
    "destination": "New York",
    "departure_time": "10:15",
    "arrival_time": "13:45",
    "available_classes": [
      "First Class",
      "Economy"
    ],
    "base_price": {
      "First Class": 120.0,
      "Economy": 45.0
    }
  },
  {
    "train_number": "TRN003",
    "name": "Western Eagle",
    "source": "Chicago",
    "destination": "Denver",
    "departure_time": "14:20",
    "arrival_time": "22:35",
    "available_classes": [
      "First Class",
      "Business",
      "Economy"
    ],
    "base_price": {
      "First Class": 280.0,
      "Business": 180.0,
      "Economy": 120.0
    }
  }
]

Testing: Get specific train details
URL: GET http://localhost:8084/trains/TRN001
Success! Response:
{
  "train_number": "TRN001",
  "name": "Express 505",
  "source": "New York",
  "destination": "Washington DC",
  "departure_time": "08:30",
  "arrival_time": "12:00",
  "available_classes": [
    "First Class",
    "Business",
    "Economy"
  ],
  "base_price": {
    "First Class": 150.0,
    "Business": 100.0,
    "Economy": 50.0
  }
}

Testing: Create a new train booking
URL: POST http://localhost:8084/train-bookings
Payload: {
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "train_number": "TRN001",
    "travel_date": "2025-05-15",
    "passenger_count": 2,
    "train_class": "First Class",
    "passengers": [
        {
            "name": "Jane Smith",
            "age": 35,
            "id_type": "Passport",
            "id_number": "AB123456"
        },
        {
            "name": "David Smith",
            "age": 40,
            "id_type": "Passport",
            "id_number": "CD789012"
        }
    ],
    "special_requests": "Window seats preferred"
}
Success! Response:
{
  "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
  "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
  "train_number": "TRN001",
  "train_name": "Express 505",
  "source": "New York",
  "destination": "Washington DC",
  "travel_date": "2025-05-15",
  "departure_time": "08:30",
  "arrival_time": "12:00",
  "train_class": "First Class",
  "price_per_passenger": 150.0,
  "total_price": 300.0,
  "passenger_count": 2,
  "passengers": [
    {
      "name": "Jane Smith",
      "age": 35,
      "id_type": "Passport",
      "id_number": "AB123456"
    },
    {
      "name": "David Smith",
      "age": 40,
      "id_type": "Passport",
      "id_number": "CD789012"
    }
  ],
  "special_requests": "Window seats preferred",
  "booking_date": "2025-04-25",
  "status": "Confirmed"
}
Created train booking with ID: 16be7a31-b5ad-473d-8548-ba3313abcd0d

Testing: List all train bookings
URL: GET http://localhost:8084/train-bookings
Success! Response:
[
  {
    "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "train_number": "TRN001",
    "train_name": "Express 505",
    "source": "New York",
    "destination": "Washington DC",
    "travel_date": "2025-05-15",
    "departure_time": "08:30",
    "arrival_time": "12:00",
    "train_class": "First Class",
    "price_per_passenger": 150.0,
    "total_price": 300.0,
    "passenger_count": 2,
    "passengers": [
      {
        "name": "Jane Smith",
        "age": 35,
        "id_type": "Passport",
        "id_number": "AB123456"
      },
      {
        "name": "David Smith",
        "age": 40,
        "id_type": "Passport",
        "id_number": "CD789012"
      }
    ],
    "special_requests": "Window seats preferred",
    "booking_date": "2025-04-25",
    "status": "Confirmed"
  }
]

Testing: Get specific train booking details
URL: GET http://localhost:8084/train-bookings/16be7a31-b5ad-473d-8548-ba3313abcd0d
Success! Response:
{
  "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
  "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
  "train_number": "TRN001",
  "train_name": "Express 505",
  "source": "New York",
  "destination": "Washington DC",
  "travel_date": "2025-05-15",
  "departure_time": "08:30",
  "arrival_time": "12:00",
  "train_class": "First Class",
  "price_per_passenger": 150.0,
  "total_price": 300.0,
  "passenger_count": 2,
  "passengers": [
    {
      "name": "Jane Smith",
      "age": 35,
      "id_type": "Passport",
      "id_number": "AB123456"
    },
    {
      "name": "David Smith",
      "age": 40,
      "id_type": "Passport",
      "id_number": "CD789012"
    }
  ],
  "special_requests": "Window seats preferred",
  "booking_date": "2025-04-25",
  "status": "Confirmed"
}

Testing: Get agent's train bookings
URL: GET http://localhost:8084/agents/bf1663d6-d2b7-43a9-969c-efbfca033ba0/train-bookings
Success! Response:
[
  {
    "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
    "agent_id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
    "train_number": "TRN001",
    "train_name": "Express 505",
    "source": "New York",
    "destination": "Washington DC",
    "travel_date": "2025-05-15",
    "departure_time": "08:30",
    "arrival_time": "12:00",
    "train_class": "First Class",
    "price_per_passenger": 150.0,
    "total_price": 300.0,
    "passenger_count": 2,
    "passengers": [
      {
        "name": "Jane Smith",
        "age": 35,
        "id_type": "Passport",
        "id_number": "AB123456"
      },
      {
        "name": "David Smith",
        "age": 40,
        "id_type": "Passport",
        "id_number": "CD789012"
      }
    ],
    "special_requests": "Window seats preferred",
    "booking_date": "2025-04-25",
    "status": "Confirmed"
  }
]

=== Testing Train Seat Status Service ===
Testing: Reserve seats for a train booking
URL: POST http://localhost:8090/seat-reservations
Payload: {
    "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
    "train_number": "TRN001",
    "seats": ["FC1-1A", "FC1-1B"],
    "travel_date": "2025-05-15",
    "status": "confirmed"
}
Success! Response:
{
  "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
  "train_number": "TRN001",
  "seats": [
    "FC1-1A",
    "FC1-1B"
  ],
  "travel_date": "2025-05-15",
  "status": "confirmed"
}

Testing: Get seat status for booking
URL: GET http://localhost:8090/bookings/16be7a31-b5ad-473d-8548-ba3313abcd0d/seats/status
Success! Response:
{
  "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
  "train_number": "TRN001",
  "travel_date": "2025-05-15",
  "seats": [
    "FC1-1A",
    "FC1-1B"
  ],
  "status": "confirmed"
}

Testing: Cancel seat reservations
URL: PUT http://localhost:8090/bookings/16be7a31-b5ad-473d-8548-ba3313abcd0d/seats/cancel
Success! Response:
{
  "message": "Seat reservations cancelled successfully",
  "booking_id": "16be7a31-b5ad-473d-8548-ba3313abcd0d",
  "status": "cancelled"
}

=== Testing Error Handling Service ===
Testing: Retrieve service registry (list of registered services)
URL: GET http://localhost:8005/registry
Success! Response:
{
  "agent_service": "http://agent_service:8000",
  "booking_service": "http://booking_service:8001",
  "sales_service": "http://sales_service:8002",
  "invoicing_service": "http://invoicing_service:8003",
  "train_booking_service": "http://train_booking_service:8084",
  "train_seat_status_service": "http://train_seat_status_service:8090"
}

Testing: Register a new test service
URL: POST http://localhost:8005/registry/test_service?url=http://test_service:9999
Success! Response:
{
  "message": "Service 'test_service' registered at http://test_service:9999"
}

Testing: Fetch overall health status of all services
URL: GET http://localhost:8005/health
Success! Response:
{
  "sales_service": {
    "service_name": "sales_service",
    "status": "up",
    "last_checked": "2025-04-25T06:44:38.500573",
    "response_time": 206.03489875793457,
    "endpoint": "http://sales_service:8002/"
  },
  "invoicing_service": {
    "service_name": "invoicing_service",
    "status": "up",
    "last_checked": "2025-04-25T06:44:38.501518",
    "response_time": 169.5547103881836,
    "endpoint": "http://invoicing_service:8003/"
  },
  "agent_service": {
    "service_name": "agent_service",
    "status": "up",
    "last_checked": "2025-04-25T06:44:38.500647",
    "response_time": 286.022424697876,
    "endpoint": "http://agent_service:8000/"
  },
  "booking_service": {
    "service_name": "booking_service",
    "status": "up",
    "last_checked": "2025-04-25T06:44:38.497517",
    "response_time": 243.18957328796387,
    "endpoint": "http://booking_service:8001/"
  },
  "train_seat_status_service": {
    "service_name": "train_seat_status_service",
    "status": "up",
    "last_checked": "2025-04-25T06:44:38.500683",
    "response_time": 93.62339973449707,
    "endpoint": "http://train_seat_status_service:8090/"
  },
  "train_booking_service": {
    "service_name": "train_booking_service",
    "status": "up",
    "last_checked": "2025-04-25T06:44:38.500716",
    "response_time": 130.7685375213623,
    "endpoint": "http://train_booking_service:8084/"
  },
  "test_service": {
    "service_name": "test_service",
    "status": "down",
    "last_checked": "2025-04-25T06:44:38.621344",
    "response_time": 0.0,
    "endpoint": "http://test_service:9999/"
  }
}

Testing: Retrieve historical error logs
URL: GET http://localhost:8005/errors
Success! Response:
[
  {
    "timestamp": "2025-04-25T06:44:38.621383",
    "service_name": "test_service",
    "endpoint": "http://test_service:9999/",
    "status_code": 503,
    "error_message": "[Errno -2] Name or service not known",
    "request_details": null
  }
]

Testing: Proxy request to agent_service to fetch agent list
URL: POST http://localhost:8005/proxy
Payload: {
    "target_service": "agent_service",
    "endpoint": "agents",
    "method": "GET",
    "data": null,
    "headers": null
}
Success! Response:
{
  "status_code": 200,
  "headers": {
    "date": "Fri, 25 Apr 2025 06:44:37 GMT",
    "server": "uvicorn",
    "content-length": "195",
    "content-type": "application/json"
  },
  "data": [
    {
      "id": "bf1663d6-d2b7-43a9-969c-efbfca033ba0",
      "name": "John Smith",
      "email": "john@example.com",
      "phone": "123-456-7890",
      "rating": 0.0,
      "availability": {
        "days": [
          "Tuesday",
          "Thursday"
        ],
        "shift": "evening"
      }
    }
  ],
  "service": "agent_service"
}

Testing: Simulate proxy request to a nonexistent service (should generate error log)
URL: POST http://localhost:8005/proxy
Payload: {
    "target_service": "nonexistent_service",
    "endpoint": "test",
    "method": "GET",
    "data": null,
    "headers": null
}
Success! Response:
{
  "detail": "Service 'nonexistent_service' not found in registry"
}

Testing: Check health status of agent service
URL: GET http://localhost:8005/health/agent_service
Success! Response:
{
  "service_name": "agent_service",
  "status": "up",
  "last_checked": "2025-04-25T06:44:38.871858",
  "response_time": 44.779062271118164,
  "endpoint": "http://agent_service:8000/"
}

Testing: Check health status of booking service
URL: GET http://localhost:8005/health/booking_service
Success! Response:
{
  "service_name": "booking_service",
  "status": "up",
  "last_checked": "2025-04-25T06:44:38.953965",
  "response_time": 44.87729072570801,
  "endpoint": "http://booking_service:8001/"
}

Testing: Check health status of sales service
URL: GET http://localhost:8005/health/sales_service
Success! Response:
{
  "service_name": "sales_service",
  "status": "up",
  "last_checked": "2025-04-25T06:44:39.049443",
  "response_time": 58.045387268066406,
  "endpoint": "http://sales_service:8002/"
}

Testing: Check health status of invoicing service
URL: GET http://localhost:8005/health/invoicing_service
Success! Response:
{
  "service_name": "invoicing_service",
  "status": "up",
  "last_checked": "2025-04-25T06:44:39.132366",
  "response_time": 45.583248138427734,
  "endpoint": "http://invoicing_service:8003/"
}

Testing: Check health status of train booking service
URL: GET http://localhost:8005/health/train_booking_service
Success! Response:
{
  "service_name": "train_booking_service",
  "status": "up",
  "last_checked": "2025-04-25T06:44:39.215442",
  "response_time": 45.279741287231445,
  "endpoint": "http://train_booking_service:8084/"
}

Testing: Check health status of train seat status service
URL: GET http://localhost:8005/health/train_seat_status_service
Success! Response:
{
  "service_name": "train_seat_status_service",
  "status": "up",
  "last_checked": "2025-04-25T06:44:39.300784",
  "response_time": 45.79567909240723,
  "endpoint": "http://train_seat_status_service:8090/"
}

Testing: Proxy request for non-existent agent to generate error entry
URL: POST http://localhost:8005/proxy
Payload: {
    "target_service": "agent_service",
    "endpoint": "agents/00000000-0000-0000-0000-000000000000",
    "method": "GET",
    "data": null,
    "headers": null
}
Success! Response:
{
  "status_code": 404,
  "headers": {
    "date": "Fri, 25 Apr 2025 06:44:38 GMT",
    "server": "uvicorn",
    "content-length": "28",
    "content-type": "application/json"
  },
  "data": {
    "detail": "Agent not found"
  },
  "service": "agent_service"
}

Testing: Get logged errors specific to agent service
URL: GET http://localhost:8005/errors/agent_service
Success! Response:
[
  {
    "timestamp": "2025-04-25T06:44:39.387623",
    "service_name": "agent_service",
    "endpoint": "agents/00000000-0000-0000-0000-000000000000",
    "status_code": 404,
    "error_message": "{\"detail\":\"Agent not found\"}",
    "request_details": {
      "method": "GET",
      "url": "http://agent_service:8000/agents/00000000-0000-0000-0000-000000000000",
      "data": null,
      "headers": null
    }
  }
]

Testing: Remove test_service from registry
URL: DELETE http://localhost:8005/registry/test_service
Success! Response:
{
  "message": "Service 'test_service' deregistered"
}

=== Test Complete ===
All endpoints have been tested.

Generating HTML report...
HTML report generated successfully: api_test_results.html
Text report is available at: api_test_results.txt
